1. 概要
1.1 システム名
AI Lab for You

1.2 ビジョン
研究者の「創造性」を解放する。

1.3 システムの目的・ゴール
研究活動（研究テーマ設定 → 研究計画 → 実験設計 → データ解析 → 考察 → 論文執筆）を、チャットベースで効率的かつ高度にサポート。
Human In The Loopかつend to endのプロセスにより、研究者とAIが共創する環境を提供する。
1.4 システム概要（MVP範囲）
研究特化型チャットプラットフォーム
研究に特化したUI/UXで、チャットベースで研究の各フェーズを進行。
マルチエージェント機能（簡易バージョン）
複数の専門AIと会話できる仕組み。ただしMVPではAIの数を限定し、主要な専門AIのみ実装。
分岐統合型チャット（基本機能）
メインチャットの発言を起点にチャットを分岐でき、別シナリオを並行して検討可能。
左サイドバーに表示される分岐ツリー（マーメイド図）でチャットを切り替え可能。
自動論文執筆機能（簡易バージョン）
チャット内容を要約し、論文各セクションの下書きを自動生成する機能。
右サイドバーでドラフトをプレビュー、簡単な編集が可能。エクスポートは最低限の形式（WordとPDFなど）に対応。
2. 機能要件
MVPとして優先度が高いものを必須（M）とし、将来的な拡張を将来（F）で示します。

2.1 統合研究システム（メイン機能）
FR1 (M): 研究テーマから論文執筆まで、チャットベースでプロセスを一元サポート
FR2 (M): 研究プロセスを途中で修正・再検討できる柔軟なチャット構造
FR3 (M): 過去のチャット履歴を容易に参照し、特定の発言から新規分岐を開始できる
2.2 マルチエージェント研究
FR4 (M): 左サイドバーで複数の専門AI（MVPでは2～3種類）を選択・追加できる
FR5 (M): メインチャットで、ユーザ発言に対して複数AIが連続的に応答できる
FR6 (F): AI間の相互参照や補足質問など、連携的議論（MVPでは簡易連携のみ）
2.3 分岐統合型チャット
FR7 (M): メインチャットの発言を起点に新たな分岐を生成できる
FR8 (M): 左サイドバーにマーメイド図（ツリービュー）を表示し、分岐構造を可視化
FR8-1 (M): マーメイド図のノードをクリックすると対応するチャットに即座に遷移
FR9 (M): 各分岐チャットの名称はユーザが編集可能
FR10 (F): 分岐先での議論結果をメインチャットへ統合（マージ）する機能
FR11 (F): 多階層の入れ子状態にも対応（MVPでは1階層か2階層程度を想定）
2.4 自動論文執筆機能
FR12 (M): 議論内容をもとに論文セクション（背景、方法、結果、考察）のドラフトを自動生成
FR13 (M): 右サイドバーでドラフトをプレビューし、ユーザが手動修正可能
FR14 (M): MVPではWordとPDFでのエクスポートのみ対応
FR15 (F): 参考文献の自動生成やジャーナルテンプレート対応などは将来拡張
2.5 その他共通機能
FR16 (M): ユーザ認証＋ログイン機能（最低限のセキュリティ）
FR17 (M): プロジェクト単位でチャット履歴や分岐ツリー、論文ドラフトを保存管理
FR18 (F): キーワード検索や分岐名称検索（MVPでは簡易検索のみ）
FR19 (M): 右サイドバーでの議論要約表示（自動更新）
3. 非機能要件
3.1 詳細アーキテクチャ
フロントエンド

フレームワーク: React / Next.js (2024年時点でのベストプラクティスを想定)
デザイン: おしゃれでシックな色味（例：ダークグレー x 白 x アクセントカラー）
UI構成:
中央エリア: メインチャット
左サイドバー: マルチエージェント選択 + 分岐チャットツリー（マーメイド図）
右サイドバー: 議論サマリ表示 + 論文ドラフトのプレビュー
バックエンド

フレームワーク: Node.js (Express / NestJSなど) または Python (FastAPI / Flaskなど)
API設計: REST / GraphQL (MVPではRESTが実装しやすい)
LLM連携: 外部サービス（OpenAI API等）を利用し、多専門モデルとの連携はMVP時点で限定的に導入
インフラ

クラウド: AWS / GCP / Azure のいずれか（MVP段階ではAWSなどシンプルな構成）
サーバ構成: コンテナ（Docker）化しECS / Kubernetesで運用、あるいはサーバレス（AWS Lambda）も検討
DB: RDB（AWS RDS / Cloud SQLなど）＋オブジェクトストレージ(S3等)を併用
CI/CD: GitHub Actionsなどで自動テスト・デプロイを設定
セキュリティ

基本的なJWTベースの認証
通信はHTTPS（TLS1.2以上）必須
MVP段階では2段階認証などはオプション
3.2 開発環境
開発言語:
フロントエンド: TypeScript + React/Next.js
バックエンド: TypeScript (Node.js) または Python
開発ツール・IDE: VSCode / WebStorm
バージョン管理: GitHub / GitLab
プロジェクト管理ツール: Jira / Trello / Notionなど
3.3 性能・可用性要件
同時接続ユーザ数（MVP想定）: 数十名程度
レスポンス: チャット送信後、1～2秒程度でAI応答開始
稼働率: MVPでは99%程度を目標（24/7運用は検討中）
3.4 運用・保守
ログ取得（APIアクセス、エラーログ）
障害発生時の通知（メールやSlack連携）
4. 必要な画面
MVPに最低限必要な画面・UI要素を列挙します。

ログイン画面

ユーザID・パスワード入力
プロジェクト選択（または新規作成）
ダッシュボード / プロジェクト一覧画面

プロジェクトごとのステータス（未完了のチャット、ドラフトの進捗など）
新規プロジェクト作成ボタン
メインチャット画面

中央エリア
入力欄（メッセージ投稿）
ユーザとAIのやりとりを時系列に表示
左サイドバー
専門AIの選択リスト（マルチエージェント）
分岐チャットツリー（マーメイド図）
右サイドバー
議論サマリ
自動生成された論文ドラフトのプレビュー
論文ドラフト編集画面（右サイドバー内）

論文の各セクション（背景、方法、結果、考察など）を表示
テキストエリアで簡易編集が可能
エクスポートボタン（Word / PDF）
設定画面（任意）

アカウント情報編集
AIモデルの選択（デフォルト設定）
テーマカラーや言語設定（英語 / 日本語）
5. 必要なAPIの処理内容
※MVP想定の代表的なREST API例

ユーザ認証系

POST /api/auth/login
リクエスト: { email, password }
レスポンス: { token, userId }
POST /api/auth/logout
リクエスト: { token }
レスポンス: { success: true }
プロジェクト管理系

GET /api/projects
概要: ログインユーザが所属するプロジェクト一覧を取得
POST /api/projects
概要: 新規プロジェクトを作成
リクエスト例: { projectName }
GET /api/projects/{projectId}
概要: プロジェクト詳細（チャット履歴、論文ドラフトなど）を取得
チャット管理系

POST /api/projects/{projectId}/chat
概要: メインチャットへのメッセージ送信・AI応答取得
リクエスト例: { message, selectedAI }
レスポンス例: { userMessage, aiResponses: [ ... ] }
POST /api/projects/{projectId}/chat/{messageId}/branch
概要: 指定メッセージから分岐チャットを新規作成
リクエスト: { branchName }
レスポンス: { branchId }
GET /api/projects/{projectId}/chat/branches
概要: 分岐ツリー情報を取得
論文ドラフト系

GET /api/projects/{projectId}/draft
概要: 自動生成されたドラフトの取得
PUT /api/projects/{projectId}/draft
概要: ドラフトの手動編集内容を保存
リクエスト例: { section: "背景", content: "..." }
POST /api/projects/{projectId}/draft/export
概要: Word/PDF形式でエクスポート（サーバ側で一時的にファイル生成しDLリンクを返す想定）
サマリ表示系

GET /api/projects/{projectId}/summary
概要: 直近の議論サマリを取得（LLM要約）
6. 必要なDB構成
MVP想定での主要テーブルを例示します。

users

カラム	型	説明
id (PK)	UUID	ユーザID
email	VARCHAR	ログイン用メールアドレス
password_hash	VARCHAR	パスワードのハッシュ
created_at	DATETIME	登録日
projects

カラム	型	説明
id (PK)	UUID	プロジェクトID
name	VARCHAR	プロジェクト名
owner_id (FK)	UUID	オーナーユーザID（users.id）
created_at	DATETIME	作成日時
project_members (オプション：複数ユーザが同一プロジェクトに参加できる想定)

カラム	型	説明
project_id	UUID	プロジェクトID
user_id	UUID	ユーザID
role	ENUM	参加者のロール(Owner/Editor等)
created_at	DATETIME	作成日時
chats

カラム	型	説明
id (PK)	UUID	チャットメッセージID
project_id (FK)	UUID	どのプロジェクトに紐づくか
parent_id (FK)	UUID	分岐元チャットのメッセージID
branch_name	VARCHAR	分岐の名称
user_message	TEXT	ユーザの発言内容
ai_responses	JSON	AIの応答(複数AI分をJSONで格納)
created_at	DATETIME	送信日時
drafts

カラム	型	説明
id (PK)	UUID	ドラフトID
project_id (FK)	UUID	どのプロジェクトに紐づくか
section	VARCHAR	論文セクション名(背景,方法,結果,考察等)
content	TEXT	セクション本文
updated_at	DATETIME	最終更新日時
summaries (オプション：議論サマリ用)

カラム	型	説明
id (PK)	UUID	サマリID
project_id (FK)	UUID	どのプロジェクトか
summary_text	TEXT	生成された議論サマリ
created_at	DATETIME	サマリ生成日時
7. Markdown形式でのファイル・フォルダ構成
以下はMVP実装を想定したサンプル構成です。
（フロントエンドをNext.js、バックエンドをNode.js (Express) で実装する例）

bash
コピーする
AI-Lab-For-You/
├── README.md
├── .gitignore
├── package.json
├── yarn.lock
├── docker-compose.yml
├── frontend/
│   ├── next.config.js
│   ├── package.json
│   ├── src/
│   │   ├── pages/
│   │   │   ├── _app.tsx
│   │   │   ├── index.tsx           # ログイン/プロジェクト一覧 or ダッシュボード
│   │   │   └── projects/
│   │   │       └── [projectId].tsx # メインチャット画面
│   │   ├── components/
│   │   │   ├── LeftSidebar.tsx
│   │   │   ├── ChatArea.tsx
│   │   │   ├── RightSidebar.tsx
│   │   │   └── ...
│   │   ├── styles/
│   │   │   └── ...
│   │   └── utils/
│   │       └── apiClient.ts        # API呼び出しラッパ
│   └── public/
│       └── ...
├── backend/
│   ├── src/
│   │   ├── app.ts                  # Expressアプリエントリポイント
│   │   ├── routes/
│   │   │   ├── authRouter.ts
│   │   │   ├── projectsRouter.ts
│   │   │   ├── chatRouter.ts
│   │   │   └── draftRouter.ts
│   │   ├── controllers/
│   │   │   └── ...                 # 各APIのビジネスロジック
│   │   ├── models/
│   │   │   └── ...                 # DBモデル定義 (TypeORM / Sequelize / Prisma etc.)
│   │   ├── services/
│   │   │   └── aiService.ts        # AI連携処理
│   │   └── utils/
│   │       └── ...
│   ├── package.json
│   └── tsconfig.json
├── database/
│   ├── migrations/
│   └── schema.sql
└── docs/
    ├── requirements.md             # 要件定義書（このファイル）
    └── architecture.md             # 詳細設計・アーキテクチャガイド
frontend/: Next.jsによるフロントエンド実装。
backend/: Node.js (Express)によるAPIサーバ実装。
database/: スキーマ定義やマイグレーションファイルを管理。
docs/: ドキュメント関連をまとめる。
