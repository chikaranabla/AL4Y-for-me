# **全体構想：研究支援AIシステムの最終設計**

## 1. **全体像と基本方針**

### 1.1 システムのゴール

- **研究者がチャットUIを通じて「アイデア→計画→実験→解析→論文執筆」など一連の研究フローをスムーズに進行できるよう支援**する。
- 研究だけでなく、**科研費申請・論文投稿・学会発表準備**など周辺業務を含めて、AIが総合的にサポート可能。
- **Human In The Loop(HITL)を重視**し、必ず研究者の判断・フィードバックが入る形を保つ。

### 1.2 システム構成の基本方針

1. **オーケストレーター(兼クローンAI)**
    - システムの“司令塔”かつ、研究者の個人情報を踏まえた**パーソナライズ**を実装するコア。
    - ユーザーとのチャット窓口となり、内部で必要な**研究段階エージェント**や**専門分野エージェント**を呼び出す。
    - **複数エージェントの並列稼働**が必要な場合も制御する。
    - 研究者情報(クローン化用データ)を参照し、文体や提案内容を個別最適化。
    - ただし、本システムの**メインワークフローは「RAG＋研究段階エージェント」**。複数AI同時議論は**オプション的サブ機能**として位置づける。
2. **研究段階エージェントのモジュール群**
    - 研究プロセスを複数の段階(ヒアリング、アイデア創出、計画書作成、ダミーデータ生成、解析コード生成、実データ解析、論文執筆、品質検証、投稿支援 等)に分割し、**各段階に特化したサブエージェント**を用意。
    - 1つの巨大エージェントにまとめず、**タスクごとに最適なプロンプトやロジック**を持つ。
    - モジュール化により、**開発・保守・精度向上**が容易になる（将来アップデートがしやすい、タスクごとにfine-tuning可など）。
3. **RAG(Retrieval-Augmented Generation) モジュール**
    - 研究者情報YAML、論文データYAML、専門知識YAML、フィードバックYAML等を**Embedding化**し、必要な情報を検索してLLMの生成に反映。
    - 外部の大量論文DB（PDFやメタ情報）を扱う場合も、メタデータ＋要約をEmbedding化して管理する。
    - **ハルシネーション(虚偽情報)リスクを下げ、最新・正確なデータに基づいて回答できる**ようにする。
4. **ファイル形式・データ管理**
    - プロトタイプ段階では**YAML**形式を採用。可読性が高く、バージョン管理しやすい。
    - 複数のYAMLファイル(研究者情報、論文情報、専門知識、フィードバックなど)を用途別に分割し、それぞれをEmbedding化してRAG検索する。
    - 将来的にデータ量が大きくなればDB(Elasticsearch, FAISS, Milvusなど)への移行を検討。
5. **HITL(ヒトによる介入)**
    - 各研究段階でAIがドラフトや提案を提示 → 研究者がレビュー・修正 → 再生成、というループを必ず挟む。
    - **研究者固有の制約(予算、設備、目的、興味など)や倫理的判断**は人間が確実に挟む。
    - 人間が得た学習・ノウハウをフィードバックし、後続の研究や他の研究者にも生かせる仕組みを構築。
6. **正確性担保の仕組み**
    - LLMの回答の元となる情報源(各種YAML)が**信頼できるデータ**で管理されている限り、RAGによって**虚偽情報を大幅に抑制**。
    - AIの回答中に、参照元メタ情報や文献IDを表示するなど、**ソース参照機能**を盛り込む。
    - 最終的には研究者の判断や査読のチェックを必ず経るため、**多層的に信頼性を確保**する。

---

## 2. **主要コンポーネントと役割**

### 2.1 オーケストレーター(兼クローンAI)

1. **ユーザーとのチャット窓口**
    - シングルなUIで、研究者の質問・要望を受け取り、自然言語で回答する。
    - 研究者情報YAMLを常に参照し、**文体や提案内容をパーソナライズ**(クローン機能)。
2. **研究段階エージェントへの指示・統制**
    - 入力内容を解析し、「今は計画書を作るフェーズ」「今は先行研究を調べるフェーズ」など判断 → **適切なサブエージェント**を呼び出す。
    - 複数エージェントを**並列稼働**させる必要があれば同時に呼び出し、結果を統合してユーザーに返す。
3. **RAG検索の制御**
    - チャット文脈から検索クエリを生成し、YAML/DBをEmbedding検索して関連情報を取得 → LLMにプロンプト注入して回答の正確性を高める。
4. **拡張性**
    - 必要に応じて、助成金申請サポートや学会発表サポートなど**新たなエージェント**を追加しても、オーケストレーターが一括管理し、ユーザーには一貫したチャット体験を提供できる。

### 2.2 研究段階エージェント(タスク別モジュール)

- **ヒアリングエージェント**
    - 初回ログインや新プロジェクト開始時、研究者の背景(専門分野、設備、研究履歴など)を収集し、研究者情報YAMLを更新。
- **アイデア創出エージェント**
    - 先行研究の要点や関連キーワードをヒントに、新たな研究テーマや仮説を提案。
    - 必要に応じて先行研究紹介モジュール(論文データYAML)も同時稼働。
- **研究計画書エージェント**
    - アイデアを研究計画書(目的・方法・スケジュール・期待成果など)にまとめたドラフトを生成。
- **ダミーデータ生成エージェント**
    - 事前検証用のサンプルデータを合成し、計画の妥当性を試す。
    - 解析コード生成エージェントと連携して動作することも想定。
- **解析コード生成エージェント**
    - 提案された手法に基づいた解析スクリプト(Python/Rなど)を自動生成。
    - ダミーデータや実データを使ってテスト可能。
- **実データ解析エージェント**
    - 研究者がアップロードした実データを分析し、可視化や統計的検証を行う。
- **論文執筆エージェント**
    - 実験結果や考察を文章化し、論文ドラフトを作成。
    - ジャーナルのフォーマットや投稿規定をRAGで参照することも可能。
- **品質検証エージェント**
    - 作成されたドラフトをチェックし、文章の矛盾や未引用データ、倫理面などを指摘。
    - 修正を提案し、研究者が承認したら論文完成度が上がる。
- **論文投稿エージェント**
    - 適切なジャーナル候補の提示、フォーマット最終調整を支援。
    - 投稿プロセスを簡略化し、研究者の負担を軽減。

(※これらは一例で、**新規タスク(例:科研費申請エージェント、学会発表準備エージェント)**などを追加も可能。)

### 2.3 専門分野エージェント(オプション)

- 通常は、研究段階エージェント＋RAG(専門知識YAML)で十分だが、**複数の専門分野の意見を同時に比較・検討**したい時に、オーケストレーターがこれら専門エージェントを並列呼び出し、**議論結果をマージ**してユーザーに提示。
- 研究者がUI操作で「並行ディスカッション」を開始する場合などに活用。

---

## 3. **RAGとYAMLデータ管理のメリット**

### 3.1 YAML形式の利点

- **可読性 / 設定ファイルとしての使いやすさ**: 階層構造やコメントが書きやすく、開発メンバーが中身を理解しやすい。
- *バージョン管理(例: Git)**との相性がよい。差分比較が容易。
- 小～中規模では実装コストを抑えられる。

### 3.2 YAMLの種類と役割

1. **研究者情報YAML**
    - 研究者の専門分野、研究履歴、設備、好みなど。
    - **Embedding化してオーケストレーターに渡す**ことで、**クローンAI的パーソナライズ**が可能。
2. **論文データYAML**
    - 先行研究のタイトル、著者、キーワード、要約、被引用数など。
    - RAG検索で正確な文献情報を返す → **ハルシネーションによる偽の文献を防止**。
3. **専門知識YAML**
    - 分野ごとの理論、手法、公式、実験プロトコルなど確かな情報ソース。
    - LLMが勝手に誤情報を生成せずに、**正しい専門知識**を参照しやすくする。
4. **フィードバックYAML**
    - 過去の成功/失敗事例やノウハウ、ユーザーからの要望を蓄積。
    - 次回以降の提案精度向上や、似た研究でのトラブル回避に活用。

### 3.3 RAGによる正確性向上

- **LLM単体**では持っていない最新情報・正確な引用データを外部YAMLから取得。
- “RAG検索 → 該当文章をLLMプロンプトに組み込む” 流れにより、**常に最新・正確なソース**に基づいた回答を生成。
- *ソース提示(論文IDなど)**により、研究者が原文をチェックしやすく、HITLで最終確認できる。

---

## 4. **HITLの具体的運用**

1. **研究計画書作成フェーズ**
    - AIがドラフトを生成 → 研究者が予算・設備など**実情のチェック** → 修正案を返す → AI再生成。
    - フィードバックとして「この実験手法は難しい」「倫理申請が必要」などを記録し、今後の提案に生かす。
2. **実データ解析フェーズ**
    - AIが解析・可視化結果を提示 → 研究者が“異常値除去”や“別の統計手法”の必要性を判断 → 修正要求。
    - 研究者特有の現場知識(センサー誤差、検体の状態など)をフィードバックで残す。
3. **論文執筆フェーズ**
    - AIがセクションごとに文章を自動作成 → 研究者が読みやすさ、結論のロジック、引用箇所などをレビュー。
    - 「用語Aよりも用語Bのほうが適切」「この章を別の位置に移動」など個別フィードバックで品質向上。

→ いずれも「**AI提案→人間レビュー→修正再提案**」のループを回す仕組み。

---

## 5. **フィードバックシステムの具体例**

1. **各段階ごとのフィードバック**
    - 研究計画段階: 「この計画は過去に同様の研究で失敗事例あり。理由は○○だった」
    - 解析段階: 「解析コードのライブラリバージョンが古いと動作不安定」「測定条件のズレが大きい」
    - 執筆段階: 「査読コメントで指摘された点」「表記ミスに気付きやすい工夫」
2. **フィードバックの収集スタイル**
    - チャットUIに「フィードバック記録ボタン」を用意し、重要情報をユーザーが都度書き込める。
    - フェーズ終了時にAIが定型質問(「今回学んだことは？」「想定外の問題は？」)を投げ、回答をまとめてYAMLに保存。
    - 研究者が文書や画像をアップロード → 要旨抽出 → フィードバックYAMLに格納。

→ これらをEmbedding化して**RAG検索**にかけることで、今後の研究段階で**事前に似た失敗を防ぐ/改善策を提案**できる。

---

## 6. **研究以外の業務サポート(拡張例)**

- **科研費申請エージェント**
    - 公募要項や過去の採択事例を参照し、申請書のドラフトや提出期日のリマインドなどを提供。
- **学会発表サポートエージェント**
    - ポスター/スライドのテンプレート案や効果的なプレゼンの構成を提案。
- **論文投稿エージェント**
    - 選択ジャーナルのインパクトファクター、フォーマット要件、オンライン投稿システムの手順をサポート。
    - カバーレターやHighlights、Reviewer候補リスト作成も支援。

すべて**オーケストレーター**が管理し、ユーザー視点では「1つのチャットAI」に相談すれば適切なエージェントが裏で動作して必要な結果を返してくれる。

---

## 7. **複数AI・専門分野エージェントの並列議論**

- **通常の研究フロー**では1つのフェーズエージェント＋RAGで十分。
- 必要に応じて、**複数の専門分野エージェント**を同一チャットルームに呼び出し、ユーザーが同時に意見を得られる“研究室ミーティングスタイル”もサポート。

---

## 8. **最終的な利用フロー(例)**

1. **ログイン / ヒアリング(セットアップ)**
    - ヒアリングエージェントが研究者情報を更新(専門分野、研究歴、設備、好みなど)。
    - RAGストアにEmbedding化してパーソナライズ開始。
2. **アイデア創出**
    - オーケストレーターに「新しいテーマを考えたい」と伝える → アイデア創出エージェントが先行研究検索や専門知識検索を併用して提案。
    - ユーザーがHITLで方向性を選定・修正。
3. **研究計画書作成**
    - 計画書エージェントが下書きを提示 → 研究者が予算/設備面をチェック → フィードバック → 修正を繰り返し確定。
4. **ダミーデータ生成 & 解析コード作成**(必要に応じて)
    - ダミーデータ生成エージェント→解析コード生成エージェント→テスト実行→問題点を計画書にフィードバック。
5. **実データ解析**
    - 研究者が実データをアップロード → 実データ解析エージェントが処理 → 結果を可視化・要約 → 研究者がヒトとして判断。
6. **論文執筆 & 品質検証**
    - 論文執筆エージェントがドラフト作成 → 研究者が内容をレビューし、追記/修正 → 品質検証エージェントがチェック → 完成度UP。
7. **投稿支援(オプション)**
    - 論文投稿エージェントがジャーナル選定やフォーマット最適化をサポート → 実際の投稿ステップをガイド。
8. **フィードバック & ナレッジ強化**
    - 研究が完了したら、成功/失敗事例をフィードバックYAMLに登録 → 次の研究に活かす。

---

# **まとめ**

- **オーケストレーター(兼クローンAI)＋研究段階エージェント群＋RAG(YAML/DB)** というアーキテクチャにより、
    1. **1つのチャットUI**で研究全般や関連業務まで**包括的にサポート**しつつ、
    2. **フェーズごとに特化したエージェントを組み合わせる**柔軟性を確保し、
    3. **正確な情報参照(RAG)とHITL**で研究品質とユーザー満足度を両立する。
- **YAML方式**は初期フェーズの実装・拡張が容易かつ可読性が高く、**将来的な大規模化**にも移行しやすい。
- **フィードバックシステム**により、研究者の個別ノウハウや失敗事例を学習データとして活用し、**クローンAIは長期的にユーザーの右腕**として進化していく。
- 以上の構成で「研究段階エージェントをモジュール化→オーケストレーターが調整→RAGで正確情報を補強→HITLで最終品質を担保」というシンプルかつ強力な仕組みを実現できる。
