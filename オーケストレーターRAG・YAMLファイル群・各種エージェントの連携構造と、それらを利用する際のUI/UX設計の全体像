1. 全体設計のまとめ
1-1. システムの主要コンポーネント
YAMLファイル群

研究者情報YAML：研究者個人のバックグラウンド（専門領域、研究履歴、資金・設備状況、研究の好み・スタイルなど）。
論文データYAML：外部論文データのメタ情報（タイトル、著者、キーワード、被引用数など）や要約、フルテキストへのリンクなど。
Knowhow YAML：暗黙知や実験のコツ、手順・成功/失敗事例など実践的ノウハウ。
専門知識YAML：分野別の最新情報、数式モデル、実装事例など。
フィードバックYAML：ユーザーからの要望・改善案や使用実績データ。
それぞれを**Embedding化(ベクトル化)**し、RAG（Retrieval-Augmented Generation）を通して検索・利用できる。
オーケストレーターRAG

システム全体の司令塔。
研究者とのやり取り（チャットUI）を仲介しつつ、「どのエージェントを呼び出すか」「どのYAMLファイルを参照するか」を判断・制御する。
各研究段階エージェント

ヒアリングエージェント：研究者情報収集／YAMLファイル更新。
アイデア創出エージェント：曖昧なアイデアを具体化する。
研究計画書エージェント：研究計画書の作成・ブラッシュアップ。
論文執筆エージェント：研究計画・実験結果を踏まえて論文(ドラフト)を作成。
ダミーデータ生成エージェント：プロトタイピング用データを生成し、研究計画の無駄を削減。
解析コード生成エージェント：実験/解析コードを提示し、研究計画の妥当性や実用性を検証。
実データ解析エージェント：実データ入力後の本格的な解析。
品質検証エージェント：論文の整合性チェック、修正要否の判定。
論文投稿エージェント：適切なジャーナル選定やフォーマット調整・投稿作業を支援。
各専門分野エージェント

通常時は必要なし(研究段階エージェント＋RAGで十分)。
しかし、複数議論や同時に専門家の意見を複合的に聞きたい場合には、オーケストレーターがこれらを“具現化”し、並列ディスカッションを可能にする（外部分散型の利点）。
1-2. UI/UXの主要要素
統合研究system（チャットUI）

研究者が「研究テーマ設定 → 研究計画 → 実験・データ解析 → 論文執筆」という一連の流れをチャットベースで進行。
会話形式で研究の方向性を決めつつ、疑問点があればAIに問いかける。
実験データや参考文献のドラッグ＆ドロップ、ボタン押下で各エージェントの機能を呼び出し可能。
ナレッジマップ(3D可視化)

研究領域や論文同士の関係を3Dマップ表示。
分野間の関連性や被引用関係を俯瞰でき、新たな研究アイデアの発見を手助けする。
研究プロセスの前後で参照し、入口として大枠を把握し、出口として新知見をマップに反映する。
クローンAI機能

研究者情報YAMLをもとに、個々の研究者の思考・癖を学習し、チャット時の文体や提案内容をパーソナライズ。
長期的に研究者のやり方を学習し、「右腕」として進化。
全プロセスで横断的にサポートし、研究者の文体や好みに合わせたアウトプットを各エージェントが出せるよう調整。
フィードバック / Knowhowシステム

研究者の使用状況や要望、研究現場で培われたノウハウをフィードバックYAMLに記録。
これをもとにエージェント自体を継続的にアップデートし、研究効率や精度を高める。
論文・情報AIインプット

各種論文・学会発表・特許情報などを随時取り込む。
研究者がチャットで「この論文を参照したい」といったときに即座に要約や関連情報を返せる。
2. 使用の流れ（研究フローの例）
以下のフローは、通常時には「研究段階エージェント＋RAGによる専門知識の活用」を行い、必要時に「各専門分野エージェントを呼び出す」形を想定しています。

フェーズ0: ヒアリング / セットアップ
研究者がシステムにログイン。
ヒアリングエージェントが「研究者情報YAML」を更新するため、チャットUIを通じて質問（研究履歴、専門分野、設備など）。
研究者情報がYAMLファイルに追記され、Embeddingされる。
（任意）すでにある研究の過去データや論文リストをシステムへアップロードしておく。
フェーズ1: 研究アイデア創出
研究者はチャットUIで「新しい研究アイデアを検討中」と伝える。
オーケストレーターが「アイデア創出エージェント」を呼び出し、研究者情報やナレッジマップから関連テーマを探索。
研究者と対話しつつ、エージェントがアイデアを提案・ブラッシュアップ。
RAGにより「専門知識YAML」や「論文データYAML」を検索して有益な情報を取得。
必要があれば、研究者自身がUIから「専門分野エージェントを同時に呼びたい」と操作し、複数分野AIとディスカッションを行う。
フェーズ2: 研究計画書作成
研究者が「計画書を作りたい」とチャットUIで宣言。
オーケストレーターが「研究計画書エージェント」を起動。
エージェントは、アイデア創出フェーズの結果や研究者情報YAMLを参照しながら計画書のドラフトを提示。
必要に応じてRAGを用いて「統計解析」「実験プロトコル」に関する専門知識を取り込む。
研究者の追記・修正を経て、計画書のバージョンが完成。
フェーズ3: ダミーデータ生成 & 解析コード作成
研究者が「事前に試したい」と希望すれば、ダミーデータ生成エージェントを呼び出し、計画の妥当性をチェック。
生成されたダミーデータをもとに、解析コード生成エージェントがサンプルの解析スクリプトを用意。
（UI上のボタン操作などで）解析を実行。結果を計画書にフィードバックし、研究計画書エージェントが修正を提案。
計画が洗練されるまでこのループを繰り返し、最終的な計画が固まる。
フェーズ4: 実データ解析 & 再度論文執筆
研究者が実際の実験・調査を行い、実データをシステムにアップロード。
実データ解析エージェントがデータを読み込み、統計処理や可視化を実行。
結果を再度、論文執筆エージェントと連携させてセクション単位の執筆を進める（考察や結果パートなど）。
フェーズ5: 品質検証 & 投稿
品質検証エージェントが論文ドラフトをチェックし、矛盾や不足点、倫理面の問題などを指摘。
研究者と論文執筆エージェントが修正点を反映し、ドラフトを完成。
問題が解決したら、論文投稿エージェントがジャーナル選択やフォーマット最終調整を提案。
投稿手続きを支援し、研究を完了。
フェーズ6: フィードバック & ナレッジマップへの反映
投稿後、研究者は使用感や発見したノウハウをフィードバックYAMLに追記し、クローンAIや各エージェントの学習に活かす。
得られた新知見を、ナレッジマップに反映し「研究の出口」として新たなノードが追加される。
次の研究時には、過去のデータやフィードバックが生きた形で再利用される。
3. ポイントまとめ
通常時の専門知識利用は、オーケストレーター＋研究段階エージェントがYAMLファイルをRAGするだけで完結。
複数分野の視点が同時に必要な場合のみ、研究者やオーケストレーターが**外部分散型の「専門分野エージェント」**を呼び出し、並行ディスカッションを行う。
UI/UXはチャットUIを中心に、ナレッジマップ・クローンAI・フィードバックシステムが補完する。
各研究段階エージェントはワークフローに沿って研究者を誘導し、Human in the Loopを重視しながら研究を前に進める。
このように設計することで、**シンプルな日常利用（研究段階エージェント＋YAML/RAG）**と、**先端的なマルチエージェント会議（専門分野エージェントの並行稼働）の両方を使い分けられ、かつ研究者の情報資産（YAML）**が継続的に蓄積・活用されていく仕組みが実現できます。
